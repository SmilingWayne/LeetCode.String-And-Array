/*
Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.

Find the kth positive integer that is missing from this array

Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.
*/

Java.Version:

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int missCount = 0, lastMiss = -1, current = 1, ptr = 0; 
        for (missCount = 0; missCount < k; ++current) {
            if (current == arr[ptr]) {
                ptr = (ptr + 1 < arr.length) ? ptr + 1 : ptr;
            } else {
                ++missCount;
                lastMiss = current;
            }
        }
        return lastMiss;
    }
}

Java.Version2:
class Solution {
    public int findKthPositive(int[] arr, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        Map<Integer,Integer> map2 = new HashMap<>();
        int count = 1;
        int missingNumber = 1;
        for(int i = 0 ; i < arr.length; i++){
            map2.put(arr[i],1);
            while(arr[i] > missingNumber&&!map2.containsKey(missingNumber)){
                map.put(count++,missingNumber++);
            }
            missingNumber++;
        }
        for(int i = arr[arr.length-1]+1;i<arr[arr.length-1]+1+k;i++){
            map.put(count++,i);
        }
        return map.get(k);
    }
}
