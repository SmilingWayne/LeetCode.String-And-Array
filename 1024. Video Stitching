/*
You are given a series of video clips from a sporting event that lasted T seconds.  
These video clips can be overlapping with each other and have varied lengths.

Each video clip clips[i] is an interval: it starts at time clips[i][0] and ends at time clips[i][1].  

We can cut these clips into segments freely: for example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].

Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event ([0, T]).  If the task is impossible, return -1.

*/
//视频拼接的问题，思路：先找到每个元素延伸到的最大元素，然后逐个遍历：贪心法：
class Solution {
    public int videoStitching(int[][] clips, int T) {
        int[] maxn = new int[T];
        for(int[] clip :clips){
            if(clip[0] < T){
            maxn[clip[0]] = Math.max(maxn[clip[0]],clip[1]);
            }
        }
        
        int pre = 0;
        int past = 0;
        int count = 0;
        for(int i = 0 ; i < T ; i++){
            past = Math.max(past,maxn[i]);
            if(i == past){
                return -1;
            }
            if(pre == i){
                count++;
                pre = past;
            }

        }
        return count;
    }
}
